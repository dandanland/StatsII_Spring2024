alpha <- mean(y) - beta*mean(x)
# standard error
# create \hat{\sigma}
# e = y - a - b
# sum(e'e) = sum((y - a - b*x)^2)/(n-2)
sigma <- sum((y - alpha - beta*x)^2)/(6-2)
seBeta <- sqrt(sigma/sum((x-mean(x))^2))
# standard error
# seBeta*(sum(x^2)/n)
seAlpha <- sqrt((sigma/sum((x-mean(x))^2))*(sum((x^2)/6)))
# compare
test <- lm(y~x)
# goodness of fit
# need fitted values
yFitted <- alpha + beta*x
# test: predict(test)
# R^2 = RegSS / TSS = 1 - RSS/TSS
rSquare <- 1 - sum((y - yFitted)^2)/sum((y - mean(y))^2)
# F = ((n-k-1)/k)*(R^2/(1-R^2))
F <- ((6-1-1)/1)*(rSquare/(1-rSquare))
# corresponding p-value
pf(F, df1=1, df2=4, lower.tail=FALSE)
L <- c(0, 1)
c <- c(0, 3)
b <- c(alpha, beta)
subsetF <- (t((L%*%b - c)) %*% (L %*% (sigma^2 %*% solve(x%*%x)) %*% t(L)) %*% (L%*%b - c)) / 1
# F_q, n-k-1
pf(subsetF, df1=1, df2=4, lower.tail=FALSE)
# predicted value of X=12
yPredict <- alpha + beta*12
# confidence interval
yPredSE <- sigma*(1 + (12*(1/sum((x-mean(x))^2))*12))
yPredCI <- c((yPredict + qnorm(0.975)*sqrt(yPredSE)), (yPredict - qnorm(0.975)*sqrt(yPredSE)))
# test
predict(test, data.frame(x=12), interval = "predict")
yPredict
yPredCI
yPredSE <- sigma^2*(1 + (12*(1/sum((x-mean(x))^2))*12))
yPredCI <- c((yPredict + qnorm(0.975)*sqrt(yPredSE)), (yPredict - qnorm(0.975)*sqrt(yPredSE)))
yPredCI
predict(test, data.frame(x=12), interval = "predict")
yPredSE <- sigma*(1 + (12*(1/sum((x-mean(x))^2))*12))
yPredCI <- c((yPredict + qnorm(0.975)*sqrt(yPredSE)), (yPredict - qnorm(0.975)*sqrt(yPredSE)))
# test
predict(test, data.frame(x=12), interval = "predict")
yPredCI
yPredCI <- c((yPredict + qnorm(0.975)*sqrt(yPredSE)), (yPredict - qnorm(0.975)*sqrt(yPredSE)))
predict(test, data.frame(x=12), interval = "predict")
yPredCI
sqrt(yPredSE)
(-.06*2300) + (-.2 *2300) + (0.8*2300)
(0.7*1000) + (-.6*1000) + (-.06*1000)
(0.6*1300) + (1.2*1300) + (-.08*1300)
(-.06*2300)
(-.2 *2300)
(0.8*2300)
matrix(c(-.6, -.2, .8, .07, -.6, -.06, 0.6, 1.2, -1.8), ncol=3)
matrix(c(-.6, -.2, .8, .07, -.6, -.06, 0.6, 1.2, -1.8), ncol=3)%*%c(2300, 1000, 1300)
c(2300, 1000, 1300)
matrix(c(-.6, -.2, .8, .07, -.6, -.06, 0.6, 1.2, -1.8), ncol=3)%*%t(c(2300, 1000, 1300))
matrix(c(-.6, -.2, .8, .07, -.6, -.06, 0.6, 1.2, -1.8), ncol=3)%*%c(2300, 1000, 1300)
1230*50 + 40*1 + 2236*48000
matrix(c(-.6, -.2, .8, .07, -.6, -.06, .06, 1.2, -1.8), ncol=3)%*%c(2300, 1000, 1300)
matrix(c(-.6, -.2, .8, .07, -.6, -.06, .06, 1.2, -.08), ncol=3)%*%c(2300, 1000, 1300)
matrix(c(-.6, -.2, .08, .07, -.6, -.06, .06, 1.2, -.08), ncol=3)%*%c(2300, 1000, 1300)
matrix(c(-.6, -.2, .08, .07, -.6, -.06, .06, 1.2, -.08)
)
matrix(c(-.6, -.2, .08, .07, -.6, -.06, .06, 1.2, -.08), ncol=3)
matrix(c(-.06, -.2, .08, .07, -.6, -.06, .06, 1.2, -.08), ncol=3)
matrix(c(-.06, -.2, .08, .07, -.6, -.06, .06, 1.2, -.08), ncol=3)%*%c(2300, 1000, 1300)
(-.06*2300) + (-.2 *2300)
(0.8*2300)
(-.06*2300) + (-.2 *2300) + (0.08*2300)
(0.07*1000) + (-.6*1000) + (-.06*1000)
(0.06*1300) + (1.2*1300) + (-.08*1300)
(-.06*2300) + (0.07*1000) +(0.06*1300)
(-.2 *2300) + (-.6*1000) + (1.2*1300)
(0.08*2300) + (-.06*1000) + (-.08*1300)
matrix(c(-.06, -.2, .08, .07, -.6, -.06, .06, 1.2, -.08), ncol=3)%*%c(2300, 1000, 1300)
(10*50) + (50*1) + (20*48000)
(10*48000) + (50*1) + (20*50)
(10*50) + (50*1) + (20*50)
c(7, 3, 6, 8, 4, 8, 5, 7)
normalDraw <- c(7, 3, 6, 8, 4, 8, 5, 7)
mu <- mean(normalDraw)
mu
sum(x-mean(x))^2
sum(normalDraw-mu)^2
sum((normalDraw-mu)^2)
sigmaSquared <- sum((normalDraw-mu)^2) / (length(normalDraw) - 2)
sigmaSquared
var <- sigmaSquared/length(normalDraw)
var
sigmaSquared
sigmaSquared
CIupper <- mu + 1.96*sqrt(var)
CIupper
CIlower <- mu - 1.96*sqrt(var)
CIlower
1.96*sqrt(var)
CIlower <- mu - 1.96*sqrt(var)
mu
CIupper <- mu + 1.96*var
CIlower <- mu - 1.96*var
CIupper
CIlower
sigmaSquared <- sum((normalDraw-mu)^2) / (length(normalDraw) - 1)
sigmaSquared
var <- sigmaSquared/length(normalDraw)
var
var <- sigmaSquared/length(normalDraw)
var
CIupper <- mu + 1.96*sqrt(var)
CIupper
CIlower <- mu - 1.96*sqrt(var)
CIlower
sigmaSquared
sqrt(var)
1.96*sqrt(var)
sd(normalDraw)
sigmaSquared <- sum((normalDraw-mu)^2) / (length(normalDraw) - 2)
var <- sigmaSquared/length(normalDraw)
1.96*sqrt(var)
sigmaSquared <- sum((normalDraw-mu)^2) / (length(normalDraw))
var <- sigmaSquared/length(normalDraw)
1.96*sqrt(var)
length(normalDraw)
sqrt(var)
sd(normalDraw)
var
sigmaSquared
sqrt(sigmaSquared)
sigmaSquared <- sum((normalDraw-mu)^2) / (length(normalDraw) - 2)
sqrt(sigmaSquared)
sigmaSquared <- sum((normalDraw-mu)^2) / (length(normalDraw))
CIupper <- mu + 1.96*sqrt(sigmaSquared)
sqrt(sigmaSquared)
sigmaSquared <- sum((normalDraw-mu)^2) / (length(normalDraw) - 1)
sqrt(sigmaSquared)
sd(normalDraw)
sigmaSquared <- sum((normalDraw-mu)^2) / (length(normalDraw) - 1)
CIupper <- mu + 1.96*sqrt(sigmaSquared)
CIlower <- mu - 1.96*sqrt(sigmaSquared)
CIupper
CIlower
CIupper <- mu + sqrt(sigmaSquared/8)
CIupper
CIupper <- mu + sqrt(sigmaSquared)/sqrt(length(normalDraw))
CIupper
mu
CIupper <- mu + 1.96*sqrt(sigmaSquared)/sqrt(length(normalDraw))
CIupper
CIlower <- mu -1.96*sqrt(sigmaSquared)/sqrt(length(normalDraw))
CIlower
1.96*sqrt(sigmaSquared)/sqrt(length(normalDraw))
sqrt(sigmaSquared)/sqrt(length(normalDraw))
sigmaSquared / (1 - .8^2)
sqrt(sigmaSquared / (1 - .8^2))
mu -1.96*sqrt(sigmaSquared / (1 - .8^2))
mu + 1.96*sqrt(sigmaSquared / (1 - .8^2))
#install.packages("gsheet")
library(gsheet)
library(stargazer)
library(plm)
library(interplot)
dt <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1ExDJa9p6XPyWbT81ZU2urIXIMi3aPlcQ7iiKrwBatms/edit?usp=sharing")
dt$diff<-(dt$Ideology_Seniors3_3-dt$Ideology_NonSeniors3_3)
#Personal rank logged
dt$pers_ranklog<-log(dt$pers_rank)
#install.packages("plm")
#For country fixed effects
E<-pdata.frame(dt, index=c("Country","Year_survey"))
###THIS HAS AN INTERESTING RESULT
mod3new<-lm(TaxavSession~Ideology_Seniors3_3+Ideology_NonSeniors3_3+PartiesCoalition+
Ideology_Seniors3_3*Inst1+Ideology_Seniors3_3*pers_ranklog+
as.factor(Year_survey),data=dt)
summary(mod3new)
mod4new<-lm(TaxavSession~Ideology_Seniors3_3+Ideology_NonSeniors3_3+PartiesCoalition+
Ideology_Seniors3_3*Inst1+Ideology_Seniors3_3*pers_ranklog+
as.factor(Year_survey),data=dt)
summary(mod4new)
interplot(mod4,"Ideology_Seniors3_3","Inst1")
interplot(mod4,"Ideology_Seniors3_3","Inst1")
mod4new<-lm(TaxavSession~Ideology_Seniors3_3+Ideology_NonSeniors3_3+PartiesCoalition+
Ideology_Seniors3_3*Inst1+Ideology_Seniors3_3*pers_ranklog+
as.factor(Year_survey),data=dt)
summary(mod4new)
interplot(mod4,"Ideology_Seniors3_3","Inst1")
?interplot
interplot(mod4new,"Ideology_Seniors3_3","Inst1")
?dnorm
set.seed(123)
data <- data.frame(x = runif(200, 1, 10))
data$y <- 0 + 2.75*data$x + rnorm(200, 0, 1.5)
View(data)
plot(data$x, data$y)
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c(),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#####################
# Problem 1
#####################
set.seed(123)
data <- data.frame(x = runif(200, 1, 10))
data$y <- 0 + 2.75*data$x + rnorm(200, 0, 1.5)
pdf("data_dist.pdf")
plot(data$x, data$y)
dev.off()
# Remove objects from the workspace
rm(list=ls())
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Set work dictionary
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load any necessary packages
lapply(c("survival", "eha", "tidyverse", "ggfortify", "stargazer"),  pkgTest)
# Load data
data(child)
head(child)
# Select variables
# Covariables: mother's age and infant's gender
# Create a survival object using the Surv() function
child_surv <- with(child, Surv(enter, exit, event))
# Fit the Cox model
cox <- coxph(child_surv ~ m.age + sex, data = child)
# Summarize the model
summary(cox)
# Test the model, check how do all the variables contribute to the model
stargazer(drop1(cox, test = "Chisq"))
# Obtain the results for the model
stargazer(head(child))
stargazer(cox)
# Obtain hazard ratios
hrsex <- exp(-0.082215)
hrm.age <- exp(0.007617)
# Fit the survival curve
cox_fit <- survfit(cox)
# Plot the survival curve
pdf("Survial curve.pdf")
autoplot(cox_fit)
dev.off()
# Predict the survival
new.data <- with(child,
data.frame(m.age, sex = c("male", "female")))
# Plot the prediction
pdf("Prediction.pdf")
plot(survfit(cox, newdata = new.data),
conf.int = T,
ylim = c(0.7, 1),
col = c("red", "blue"),
xlab = "Time",
ylab = "Survival proportion",
main = "")
legend("bottomleft",
legend=c("Male", "Female"),
lty = 1,
col = c("red", "blue"),
text.col = c("red", "blue"))
# Adding an interaction term
# Fit the model
cox.int <- coxph(child_surv ~ m.age*sex, data = child)
summary(cox.int)
# Test the model
stargazer(drop1(cox.int, test = "Chisq"))
stargazer(cox.int)
# Test the model, check how do all the variables contribute to the model
drop1(cox, test = "Chisq")
# Remove objects from the workspace
rm(list=ls())
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Set work dictionary
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load any necessary packages
lapply(c("survival", "eha", "tidyverse", "ggfortify", "stargazer"),  pkgTest)
# Load data
data(child)
head(child)
# Select variables
# Covariables: mother's age and infant's gender
# Create a survival object using the Surv() function
child_surv <- with(child, Surv(enter, exit, event))
# Fit the Cox model
cox <- coxph(child_surv ~ m.age + sex, data = child)
# Summarize the model
summary(cox)
# Test the model, check how do all the variables contribute to the model
drop1(cox, test = "Chisq")
# Obtain the results for the model
stargazer(head(child))
stargazer(cox)
# Obtain hazard ratios
hrsex <- exp(-0.082215)
hrm.age <- exp(0.007617)
# Fit the survival curve
cox_fit <- survfit(cox)
# Plot the survival curve
pdf("Survial curve.pdf")
autoplot(cox_fit)
dev.off()
# Predict the survival
new.data <- with(child,
data.frame(m.age, sex = c("male", "female")))
# Plot the prediction
pdf("Prediction.pdf")
plot(survfit(cox, newdata = new.data),
conf.int = T,
ylim = c(0.7, 1),
col = c("red", "blue"),
xlab = "Time",
ylab = "Survival proportion",
main = "")
legend("bottomleft",
legend=c("Male", "Female"),
lty = 1,
col = c("red", "blue"),
text.col = c("red", "blue"))
dev.off()
# Remove objects from the workspace
rm(list=ls())
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Set work dictionary
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
lapply(c("survival", "eha", "tidyverse", "ggfortify", "stargazer"),  pkgTest)
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c("survival", "eha", "tidyverse", "ggfortify", "stargazer"),  pkgTest)
data(child)
#### Completed
# a)
# Create a survival object using the Surv() function
child_surv <- with(child, Surv(enter, exit, event))
# Fit the Kaplan-Meier model
km <- survfit(child_surv ~ 1, data = child)
summary(km, times = seq(0, 15, 1))
# Produce a Kaplan-Meier plot of the data
plot(km, main = "Kaplan-Meier Plot", xlab = "Years", ylim = c(0.7, 1))
autoplot(km)
km_socBranch <- survfit(child_surv ~ socBranch, data = child)
summary (km_socBranch)
autoplot(km_socBranch)
## b) Run a Cox Proportional Hazard regression on the data, using an additive model with
##    `socBranch` and `sex` as explanatory variables. Run a test to assess the quality of the
##    model. How can we interpret the coefficients? Plot the model.
# b)
cox <- coxph(child_surv ~ sex + socBranch, data = child)
summary(cox)
drop1(cox, test = "Chisq")
stargazer(cox, type = "text")
# exponentiate parameter estimates to obtain hazard ratios
exp(-0.083546)
cox_fit <- survfit(cox)
autoplot(cox_fit)
newdat <- with(child,
data.frame(
sex = c("male", "female"), socBranch="official"
)
)
plot(survfit(cox, newdata = newdat), xscale = 12,
conf.int = T,
ylim = c(0.6, 1),
col = c("red", "blue"),
xlab = "Time",
ylab = "Survival proportion",
main = "")
# Remove objects from the workspace
rm(list=ls())
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Set work dictionary
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load any necessary packages
lapply(c("survival", "eha", "tidyverse", "ggfortify", "stargazer"),  pkgTest)
# Load data
data(child)
head(child)
# Select variables
# Covariables: mother's age and infant's gender
# Create a survival object using the Surv() function
child_surv <- with(child, Surv(enter, exit, event))
# Fit the Cox model
cox <- coxph(child_surv ~ m.age + sex, data = child)
# Summarize the model
summary(cox)
# Test the model, check how do all the variables contribute to the model
drop1(cox, test = "Chisq")
# Obtain the results for the model
stargazer(head(child))
stargazer(cox)
# Obtain hazard ratios
hrsex <- exp(-0.082215)
hrm.age <- exp(0.007617)
# Fit the survival curve
cox_fit <- survfit(cox)
# Plot the survival curve
pdf("Survial curve.pdf")
autoplot(cox_fit)
dev.off()
# Plot the prediction
pdf("Prediction.pdf")
plot(survfit(cox, newdata = child), xscale = 12,
conf.int = T,
ylim = c(0.7, 1),
col = c("red", "blue"),
xlab = "Time",
ylab = "Survival proportion",
main = "")
legend("bottomleft",
legend=c("Male", "Female"),
lty = 1,
col = c("red", "blue"),
text.col = c("red", "blue"))
plot(survfit(cox, newdata = child), xscale = 12,
conf.int = T,
ylim = c(0.7, 1),
col = c("red", "blue"),
xlab = "Time",
ylab = "Survival proportion",
main = "")
